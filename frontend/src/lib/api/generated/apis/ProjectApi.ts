/* tslint:disable */
/* eslint-disable */
/**
 * PM API Specifications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Project,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectForm,
    ProjectFormFromJSON,
    ProjectFormToJSON,
    ProjectList,
    ProjectListFromJSON,
    ProjectListToJSON,
    Task,
    TaskFromJSON,
    TaskToJSON,
    TaskForm,
    TaskFormFromJSON,
    TaskFormToJSON,
} from '../models';

export interface CreateProjectRequest {
    projectForm?: ProjectForm;
}

export interface CreateProjectTaskRequest {
    projectId: string;
    taskForm: TaskForm;
}

export interface GetProjectRequest {
    projectId: string;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     */
    async createProjectRaw(requestParameters: CreateProjectRequest): Promise<runtime.ApiResponse<Project>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectFormToJSON(requestParameters.projectForm),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async createProject(requestParameters: CreateProjectRequest): Promise<Project> {
        const response = await this.createProjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new task on project
     */
    async createProjectTaskRaw(requestParameters: CreateProjectTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createProjectTask.');
        }

        if (requestParameters.taskForm === null || requestParameters.taskForm === undefined) {
            throw new runtime.RequiredError('taskForm','Required parameter requestParameters.taskForm was null or undefined when calling createProjectTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/tasks`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskFormToJSON(requestParameters.taskForm),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Create a new task on project
     */
    async createProjectTask(requestParameters: CreateProjectTaskRequest): Promise<Task> {
        const response = await this.createProjectTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getProjectRaw(requestParameters: GetProjectRequest): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async getProject(requestParameters: GetProjectRequest): Promise<Project> {
        const response = await this.getProjectRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listProjectsRelatedWithUserRaw(): Promise<runtime.ApiResponse<ProjectList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectListFromJSON(jsonValue));
    }

    /**
     */
    async listProjectsRelatedWithUser(): Promise<ProjectList> {
        const response = await this.listProjectsRelatedWithUserRaw();
        return await response.value();
    }

}
