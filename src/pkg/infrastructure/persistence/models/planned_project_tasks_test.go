// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlannedProjectTasks(t *testing.T) {
	t.Parallel()

	query := PlannedProjectTasks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlannedProjectTasksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlannedProjectTasksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PlannedProjectTasks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlannedProjectTasksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlannedProjectTaskSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlannedProjectTasksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlannedProjectTaskExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PlannedProjectTask exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlannedProjectTaskExists to return true, but got false.")
	}
}

func testPlannedProjectTasksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	plannedProjectTaskFound, err := FindPlannedProjectTask(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if plannedProjectTaskFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlannedProjectTasksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PlannedProjectTasks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlannedProjectTasksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PlannedProjectTasks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlannedProjectTasksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	plannedProjectTaskOne := &PlannedProjectTask{}
	plannedProjectTaskTwo := &PlannedProjectTask{}
	if err = randomize.Struct(seed, plannedProjectTaskOne, plannedProjectTaskDBTypes, false, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}
	if err = randomize.Struct(seed, plannedProjectTaskTwo, plannedProjectTaskDBTypes, false, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = plannedProjectTaskOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = plannedProjectTaskTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlannedProjectTasks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlannedProjectTasksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	plannedProjectTaskOne := &PlannedProjectTask{}
	plannedProjectTaskTwo := &PlannedProjectTask{}
	if err = randomize.Struct(seed, plannedProjectTaskOne, plannedProjectTaskDBTypes, false, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}
	if err = randomize.Struct(seed, plannedProjectTaskTwo, plannedProjectTaskDBTypes, false, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = plannedProjectTaskOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = plannedProjectTaskTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func plannedProjectTaskBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func plannedProjectTaskAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func plannedProjectTaskAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func plannedProjectTaskBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func plannedProjectTaskAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func plannedProjectTaskBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func plannedProjectTaskAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func plannedProjectTaskBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func plannedProjectTaskAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlannedProjectTask) error {
	*o = PlannedProjectTask{}
	return nil
}

func testPlannedProjectTasksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PlannedProjectTask{}
	o := &PlannedProjectTask{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask object: %s", err)
	}

	AddPlannedProjectTaskHook(boil.BeforeInsertHook, plannedProjectTaskBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskBeforeInsertHooks = []PlannedProjectTaskHook{}

	AddPlannedProjectTaskHook(boil.AfterInsertHook, plannedProjectTaskAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskAfterInsertHooks = []PlannedProjectTaskHook{}

	AddPlannedProjectTaskHook(boil.AfterSelectHook, plannedProjectTaskAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskAfterSelectHooks = []PlannedProjectTaskHook{}

	AddPlannedProjectTaskHook(boil.BeforeUpdateHook, plannedProjectTaskBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskBeforeUpdateHooks = []PlannedProjectTaskHook{}

	AddPlannedProjectTaskHook(boil.AfterUpdateHook, plannedProjectTaskAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskAfterUpdateHooks = []PlannedProjectTaskHook{}

	AddPlannedProjectTaskHook(boil.BeforeDeleteHook, plannedProjectTaskBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskBeforeDeleteHooks = []PlannedProjectTaskHook{}

	AddPlannedProjectTaskHook(boil.AfterDeleteHook, plannedProjectTaskAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskAfterDeleteHooks = []PlannedProjectTaskHook{}

	AddPlannedProjectTaskHook(boil.BeforeUpsertHook, plannedProjectTaskBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskBeforeUpsertHooks = []PlannedProjectTaskHook{}

	AddPlannedProjectTaskHook(boil.AfterUpsertHook, plannedProjectTaskAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	plannedProjectTaskAfterUpsertHooks = []PlannedProjectTaskHook{}
}

func testPlannedProjectTasksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlannedProjectTasksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(plannedProjectTaskColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlannedProjectTaskToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PlannedProjectTask
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, plannedProjectTaskDBTypes, false, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PlannedProjectTaskSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*PlannedProjectTask)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPlannedProjectTaskToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlannedProjectTask
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, plannedProjectTaskDBTypes, false, strmangle.SetComplement(plannedProjectTaskPrimaryKeyColumns, plannedProjectTaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlannedProjectTasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}

func testPlannedProjectTasksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlannedProjectTasksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlannedProjectTaskSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlannedProjectTasksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlannedProjectTasks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	plannedProjectTaskDBTypes = map[string]string{`ID`: `int`, `ProjectID`: `varchar`, `PlannedTaskID`: `varchar`}
	_                         = bytes.MinRead
)

func testPlannedProjectTasksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(plannedProjectTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(plannedProjectTaskAllColumns) == len(plannedProjectTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlannedProjectTasksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(plannedProjectTaskAllColumns) == len(plannedProjectTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlannedProjectTask{}
	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, plannedProjectTaskDBTypes, true, plannedProjectTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(plannedProjectTaskAllColumns, plannedProjectTaskPrimaryKeyColumns) {
		fields = plannedProjectTaskAllColumns
	} else {
		fields = strmangle.SetComplement(
			plannedProjectTaskAllColumns,
			plannedProjectTaskPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlannedProjectTaskSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlannedProjectTasksUpsert(t *testing.T) {
	t.Parallel()

	if len(plannedProjectTaskAllColumns) == len(plannedProjectTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPlannedProjectTaskUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PlannedProjectTask{}
	if err = randomize.Struct(seed, &o, plannedProjectTaskDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlannedProjectTask: %s", err)
	}

	count, err := PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, plannedProjectTaskDBTypes, false, plannedProjectTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlannedProjectTask struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlannedProjectTask: %s", err)
	}

	count, err = PlannedProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
