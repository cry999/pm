// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlannedProjectTask is an object representing the database table.
type PlannedProjectTask struct {
	ID            int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID     string `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	PlannedTaskID string `boil:"planned_task_id" json:"planned_task_id" toml:"planned_task_id" yaml:"planned_task_id"`

	R *plannedProjectTaskR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L plannedProjectTaskL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlannedProjectTaskColumns = struct {
	ID            string
	ProjectID     string
	PlannedTaskID string
}{
	ID:            "id",
	ProjectID:     "project_id",
	PlannedTaskID: "planned_task_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PlannedProjectTaskWhere = struct {
	ID            whereHelperint
	ProjectID     whereHelperstring
	PlannedTaskID whereHelperstring
}{
	ID:            whereHelperint{field: "`planned_project_tasks`.`id`"},
	ProjectID:     whereHelperstring{field: "`planned_project_tasks`.`project_id`"},
	PlannedTaskID: whereHelperstring{field: "`planned_project_tasks`.`planned_task_id`"},
}

// PlannedProjectTaskRels is where relationship names are stored.
var PlannedProjectTaskRels = struct {
	Project string
}{
	Project: "Project",
}

// plannedProjectTaskR is where relationships are stored.
type plannedProjectTaskR struct {
	Project *Project `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
}

// NewStruct creates a new relationship struct
func (*plannedProjectTaskR) NewStruct() *plannedProjectTaskR {
	return &plannedProjectTaskR{}
}

// plannedProjectTaskL is where Load methods for each relationship are stored.
type plannedProjectTaskL struct{}

var (
	plannedProjectTaskAllColumns            = []string{"id", "project_id", "planned_task_id"}
	plannedProjectTaskColumnsWithoutDefault = []string{"project_id", "planned_task_id"}
	plannedProjectTaskColumnsWithDefault    = []string{"id"}
	plannedProjectTaskPrimaryKeyColumns     = []string{"id"}
)

type (
	// PlannedProjectTaskSlice is an alias for a slice of pointers to PlannedProjectTask.
	// This should generally be used opposed to []PlannedProjectTask.
	PlannedProjectTaskSlice []*PlannedProjectTask
	// PlannedProjectTaskHook is the signature for custom PlannedProjectTask hook methods
	PlannedProjectTaskHook func(context.Context, boil.ContextExecutor, *PlannedProjectTask) error

	plannedProjectTaskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	plannedProjectTaskType                 = reflect.TypeOf(&PlannedProjectTask{})
	plannedProjectTaskMapping              = queries.MakeStructMapping(plannedProjectTaskType)
	plannedProjectTaskPrimaryKeyMapping, _ = queries.BindMapping(plannedProjectTaskType, plannedProjectTaskMapping, plannedProjectTaskPrimaryKeyColumns)
	plannedProjectTaskInsertCacheMut       sync.RWMutex
	plannedProjectTaskInsertCache          = make(map[string]insertCache)
	plannedProjectTaskUpdateCacheMut       sync.RWMutex
	plannedProjectTaskUpdateCache          = make(map[string]updateCache)
	plannedProjectTaskUpsertCacheMut       sync.RWMutex
	plannedProjectTaskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var plannedProjectTaskBeforeInsertHooks []PlannedProjectTaskHook
var plannedProjectTaskBeforeUpdateHooks []PlannedProjectTaskHook
var plannedProjectTaskBeforeDeleteHooks []PlannedProjectTaskHook
var plannedProjectTaskBeforeUpsertHooks []PlannedProjectTaskHook

var plannedProjectTaskAfterInsertHooks []PlannedProjectTaskHook
var plannedProjectTaskAfterSelectHooks []PlannedProjectTaskHook
var plannedProjectTaskAfterUpdateHooks []PlannedProjectTaskHook
var plannedProjectTaskAfterDeleteHooks []PlannedProjectTaskHook
var plannedProjectTaskAfterUpsertHooks []PlannedProjectTaskHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlannedProjectTask) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlannedProjectTask) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlannedProjectTask) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlannedProjectTask) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlannedProjectTask) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlannedProjectTask) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlannedProjectTask) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlannedProjectTask) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlannedProjectTask) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range plannedProjectTaskAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlannedProjectTaskHook registers your hook function for all future operations.
func AddPlannedProjectTaskHook(hookPoint boil.HookPoint, plannedProjectTaskHook PlannedProjectTaskHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		plannedProjectTaskBeforeInsertHooks = append(plannedProjectTaskBeforeInsertHooks, plannedProjectTaskHook)
	case boil.BeforeUpdateHook:
		plannedProjectTaskBeforeUpdateHooks = append(plannedProjectTaskBeforeUpdateHooks, plannedProjectTaskHook)
	case boil.BeforeDeleteHook:
		plannedProjectTaskBeforeDeleteHooks = append(plannedProjectTaskBeforeDeleteHooks, plannedProjectTaskHook)
	case boil.BeforeUpsertHook:
		plannedProjectTaskBeforeUpsertHooks = append(plannedProjectTaskBeforeUpsertHooks, plannedProjectTaskHook)
	case boil.AfterInsertHook:
		plannedProjectTaskAfterInsertHooks = append(plannedProjectTaskAfterInsertHooks, plannedProjectTaskHook)
	case boil.AfterSelectHook:
		plannedProjectTaskAfterSelectHooks = append(plannedProjectTaskAfterSelectHooks, plannedProjectTaskHook)
	case boil.AfterUpdateHook:
		plannedProjectTaskAfterUpdateHooks = append(plannedProjectTaskAfterUpdateHooks, plannedProjectTaskHook)
	case boil.AfterDeleteHook:
		plannedProjectTaskAfterDeleteHooks = append(plannedProjectTaskAfterDeleteHooks, plannedProjectTaskHook)
	case boil.AfterUpsertHook:
		plannedProjectTaskAfterUpsertHooks = append(plannedProjectTaskAfterUpsertHooks, plannedProjectTaskHook)
	}
}

// One returns a single plannedProjectTask record from the query.
func (q plannedProjectTaskQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlannedProjectTask, error) {
	o := &PlannedProjectTask{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for planned_project_tasks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlannedProjectTask records from the query.
func (q plannedProjectTaskQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlannedProjectTaskSlice, error) {
	var o []*PlannedProjectTask

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PlannedProjectTask slice")
	}

	if len(plannedProjectTaskAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlannedProjectTask records in the query.
func (q plannedProjectTaskQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count planned_project_tasks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q plannedProjectTaskQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if planned_project_tasks exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *PlannedProjectTask) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "`projects`")

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (plannedProjectTaskL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlannedProjectTask interface{}, mods queries.Applicator) error {
	var slice []*PlannedProjectTask
	var object *PlannedProjectTask

	if singular {
		object = maybePlannedProjectTask.(*PlannedProjectTask)
	} else {
		slice = *maybePlannedProjectTask.(*[]*PlannedProjectTask)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &plannedProjectTaskR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &plannedProjectTaskR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(plannedProjectTaskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.PlannedProjectTasks = append(foreign.R.PlannedProjectTasks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.PlannedProjectTasks = append(foreign.R.PlannedProjectTasks, local)
				break
			}
		}
	}

	return nil
}

// SetProject of the plannedProjectTask to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.PlannedProjectTasks.
func (o *PlannedProjectTask) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `planned_project_tasks` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"project_id"}),
		strmangle.WhereClause("`", "`", 0, plannedProjectTaskPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &plannedProjectTaskR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			PlannedProjectTasks: PlannedProjectTaskSlice{o},
		}
	} else {
		related.R.PlannedProjectTasks = append(related.R.PlannedProjectTasks, o)
	}

	return nil
}

// PlannedProjectTasks retrieves all the records using an executor.
func PlannedProjectTasks(mods ...qm.QueryMod) plannedProjectTaskQuery {
	mods = append(mods, qm.From("`planned_project_tasks`"))
	return plannedProjectTaskQuery{NewQuery(mods...)}
}

// FindPlannedProjectTask retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlannedProjectTask(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PlannedProjectTask, error) {
	plannedProjectTaskObj := &PlannedProjectTask{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `planned_project_tasks` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, plannedProjectTaskObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from planned_project_tasks")
	}

	return plannedProjectTaskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlannedProjectTask) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no planned_project_tasks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(plannedProjectTaskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	plannedProjectTaskInsertCacheMut.RLock()
	cache, cached := plannedProjectTaskInsertCache[key]
	plannedProjectTaskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			plannedProjectTaskAllColumns,
			plannedProjectTaskColumnsWithDefault,
			plannedProjectTaskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(plannedProjectTaskType, plannedProjectTaskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(plannedProjectTaskType, plannedProjectTaskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `planned_project_tasks` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `planned_project_tasks` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `planned_project_tasks` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, plannedProjectTaskPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into planned_project_tasks")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == plannedProjectTaskMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for planned_project_tasks")
	}

CacheNoHooks:
	if !cached {
		plannedProjectTaskInsertCacheMut.Lock()
		plannedProjectTaskInsertCache[key] = cache
		plannedProjectTaskInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlannedProjectTask.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlannedProjectTask) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	plannedProjectTaskUpdateCacheMut.RLock()
	cache, cached := plannedProjectTaskUpdateCache[key]
	plannedProjectTaskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			plannedProjectTaskAllColumns,
			plannedProjectTaskPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update planned_project_tasks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `planned_project_tasks` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, plannedProjectTaskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(plannedProjectTaskType, plannedProjectTaskMapping, append(wl, plannedProjectTaskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update planned_project_tasks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for planned_project_tasks")
	}

	if !cached {
		plannedProjectTaskUpdateCacheMut.Lock()
		plannedProjectTaskUpdateCache[key] = cache
		plannedProjectTaskUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q plannedProjectTaskQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for planned_project_tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for planned_project_tasks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlannedProjectTaskSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), plannedProjectTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `planned_project_tasks` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, plannedProjectTaskPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in plannedProjectTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all plannedProjectTask")
	}
	return rowsAff, nil
}

var mySQLPlannedProjectTaskUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlannedProjectTask) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no planned_project_tasks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(plannedProjectTaskColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlannedProjectTaskUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	plannedProjectTaskUpsertCacheMut.RLock()
	cache, cached := plannedProjectTaskUpsertCache[key]
	plannedProjectTaskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			plannedProjectTaskAllColumns,
			plannedProjectTaskColumnsWithDefault,
			plannedProjectTaskColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			plannedProjectTaskAllColumns,
			plannedProjectTaskPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert planned_project_tasks, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`planned_project_tasks`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `planned_project_tasks` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(plannedProjectTaskType, plannedProjectTaskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(plannedProjectTaskType, plannedProjectTaskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for planned_project_tasks")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == plannedProjectTaskMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(plannedProjectTaskType, plannedProjectTaskMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for planned_project_tasks")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for planned_project_tasks")
	}

CacheNoHooks:
	if !cached {
		plannedProjectTaskUpsertCacheMut.Lock()
		plannedProjectTaskUpsertCache[key] = cache
		plannedProjectTaskUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlannedProjectTask record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlannedProjectTask) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PlannedProjectTask provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), plannedProjectTaskPrimaryKeyMapping)
	sql := "DELETE FROM `planned_project_tasks` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from planned_project_tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for planned_project_tasks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q plannedProjectTaskQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no plannedProjectTaskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from planned_project_tasks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for planned_project_tasks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlannedProjectTaskSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(plannedProjectTaskBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), plannedProjectTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `planned_project_tasks` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, plannedProjectTaskPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from plannedProjectTask slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for planned_project_tasks")
	}

	if len(plannedProjectTaskAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlannedProjectTask) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlannedProjectTask(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlannedProjectTaskSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlannedProjectTaskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), plannedProjectTaskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `planned_project_tasks`.* FROM `planned_project_tasks` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, plannedProjectTaskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlannedProjectTaskSlice")
	}

	*o = slice

	return nil
}

// PlannedProjectTaskExists checks if the PlannedProjectTask row exists.
func PlannedProjectTaskExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `planned_project_tasks` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if planned_project_tasks exists")
	}

	return exists, nil
}
